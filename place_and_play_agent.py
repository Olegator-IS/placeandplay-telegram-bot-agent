"""
Place&Play Agent - –ê–≥–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º API –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import os
import logging
import requests
import jwt
import secrets
from datetime import datetime, timedelta
from typing import Dict, Optional, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('config.env')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class PlaceAndPlayAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Place&Play API –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        self.api_base_url = os.getenv('PLACE_AND_PLAY_API_BASE_URL', 'http://95.46.96.94:8080/PlaceAndPlay/api')
        self.telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.login_email = os.getenv('PLACE_AND_PLAY_LOGIN_EMAIL')
        self.login_password = os.getenv('PLACE_AND_PLAY_LOGIN_PASSWORD')
        self.jwt_secret = os.getenv('JWT_SECRET', secrets.token_urlsafe(32))
        
        if not self.telegram_bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.env")
        if not self.api_base_url:
            raise ValueError("PLACE_AND_PLAY_API_BASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.env")
        
        logger.info(f"Place&Play Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. API: {self.api_base_url}")

    def generate_verification_link(self, phone_number: str, access_token: str, refresh_token: str, bot_username: str) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        Args:
            phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            access_token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            refresh_token: –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_username: Username –±–æ—Ç–∞ (–±–µ–∑ @)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å—Å—ã–ª–∫–æ–π –∏ —Ç–æ–∫–µ–Ω–æ–º
        """
        try:
            # –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payload = {
                'phone_number': phone_number,
                'access_token': access_token,
                'refresh_token': refresh_token,
                'exp': datetime.utcnow() + timedelta(hours=24),  # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 24 —á–∞—Å–∞
                'iat': datetime.utcnow(),
                'type': 'verification'
            }
            
            jwt_token = jwt.encode(payload, self.jwt_secret, algorithm='HS256')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –±–æ—Ç–∞
            bot_link = f"https://t.me/{bot_username}?start={jwt_token}"
            
            logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}")
            
            return {
                "success": True,
                "verification_link": bot_link,
                "jwt_token": jwt_token,
                "phone_number": phone_number,
                "expires_at": payload['exp'].isoformat(),
                "message": "–°—Å—ã–ª–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞"
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")
            return {
                "success": False,
                "error": "LINK_GENERATION_ERROR",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}"
            }

    def validate_verification_token(self, jwt_token: str) -> Dict:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
        Args:
            jwt_token: JWT —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
            payload = jwt.decode(jwt_token, self.jwt_secret, algorithms=['HS256'])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞
            if payload.get('type') != 'verification':
                return {
                    "success": False,
                    "error": "INVALID_TOKEN_TYPE",
                    "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–∫–µ–Ω–∞"
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            if datetime.utcnow() > datetime.fromisoformat(payload['exp'].isoformat()):
                return {
                    "success": False,
                    "error": "TOKEN_EXPIRED",
                    "message": "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
                }
            
            logger.info(f"JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞: {payload['phone_number']}")
            
            return {
                "success": True,
                "phone_number": payload['phone_number'],
                "access_token": payload['access_token'],
                "refresh_token": payload['refresh_token'],
                "expires_at": payload['exp'].isoformat(),
                "message": "–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω"
            }
            
        except jwt.ExpiredSignatureError:
            return {
                "success": False,
                "error": "TOKEN_EXPIRED",
                "message": "–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫"
            }
        except jwt.InvalidTokenError:
            return {
                "success": False,
                "error": "INVALID_TOKEN",
                "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            return {
                "success": False,
                "error": "VALIDATION_ERROR",
                "message": f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}"
            }

    def process_verification_from_token(self, jwt_token: str, chat_id: int) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ JWT —Ç–æ–∫–µ–Ω—É
        
        Args:
            jwt_token: JWT —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            chat_id: ID —á–∞—Ç–∞ –≤ Telegram
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            token_validation = self.validate_verification_token(jwt_token)
            if not token_validation["success"]:
                error_message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞</b>

üö® –ü—Ä–æ–±–ª–µ–º–∞: {token_validation['message']}

üîÑ <b>–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>
                """.strip()
                
                self.send_telegram_message(chat_id, error_message)
                return token_validation
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
            phone_number = token_validation["phone_number"]
            access_token = token_validation["access_token"]
            refresh_token = token_validation["refresh_token"]
            
            logger.info(f"–¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω. –ù–æ–º–µ—Ä: {phone_number}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            api_result = self.request_verification_code(phone_number, access_token, refresh_token)
            
            if api_result.get("success") and api_result.get("code"):
                code = api_result["code"]
                message = (
                    "üîê <b>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
                    f"üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>\n"
                    f"üî¢ –ö–æ–¥: <code>{code}</code>\n\n"
                    "‚ö†Ô∏è <i>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥</i>\n"
                    "üí° <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>\n\n"
                    "‚úÖ <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞!</b>"
                )
                
                self.send_telegram_message(chat_id, message)
                return {
                    "success": True,
                    "message": "–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    "phone_number": phone_number,
                    "code": code,
                    "chat_id": chat_id
                }
            else:
                error_text = api_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                error_type = api_result.get("error", "UNKNOWN_ERROR")
                
                if error_type == "AUTH_ERROR":
                    message = (
                        "‚ùå <b>–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
                        f"üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>\n"
                        "üîë –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞\n\n"
                        "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ</b>"
                    )
                else:
                    message = (
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞</b>\n\n"
                        f"üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>\n"
                        f"üö® –ü—Ä–æ–±–ª–µ–º–∞: {error_text}\n\n"
                        "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>"
                    )
                
                self.send_telegram_message(chat_id, message)
                return {
                    "success": False,
                    "error": error_type,
                    "message": error_text,
                    "phone_number": phone_number
                }
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É: {str(e)}"
            logger.error(error_msg)
            
            error_message = f"""
‚ùå <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞</b>

üö® –ü—Ä–æ–±–ª–µ–º–∞: {error_msg}

üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>
            """.strip()
            
            self.send_telegram_message(chat_id, error_message)
            
            return {
                "success": False,
                "error": "INTERNAL_ERROR",
                "message": error_msg
            }

    def _find_code_in_payload(self, payload: Any) -> Optional[str]:
        """–ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –æ—Ç–≤–µ—Ç–∞ (dict/list)."""
        TARGET_KEYS = {"code", "verificationCode", "otp", "otpCode"}
        try:
            if isinstance(payload, dict):
                for key, value in payload.items():
                    lower_key = str(key).lower()
                    if lower_key in TARGET_KEYS and isinstance(value, (str, int)):
                        return str(value)
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ø—É—Å–∫
                    found = self._find_code_in_payload(value)
                    if found:
                        return found
            elif isinstance(payload, list):
                for item in payload:
                    found = self._find_code_in_payload(item)
                    if found:
                        return found
            return None
        except Exception:
            return None

    def get_auth_tokens(self) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç accessToken –∏ refreshToken —á–µ—Ä–µ–∑ API login
        """
        try:
            login_url = f"{self.api_base_url}/auth/login"
            login_data = {
                "phoneNumber": "telegrambot@gmail.com",
                "password": "TelegramBotPlaceAndPlay"
            }
            headers = {
                'Content-Type': 'application/json',
                'User-Agent': 'PlaceAndPlay-TelegramBot/1.0',
                'isUser': 'true',
                'language': 'uz'
            }
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            response = requests.post(login_url, json=login_data, headers=headers, timeout=30)
            
            if response.status_code == 200:
                response_data = response.json()
                if response_data.get("status") == 200 and "result" in response_data:
                    tokens = response_data["result"]
                    access_token = tokens.get("accessToken")
                    refresh_token = tokens.get("refreshToken")
                    
                    if access_token and refresh_token:
                        logger.info("–¢–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã")
                        return {
                            "success": True,
                            "access_token": access_token,
                            "refresh_token": refresh_token,
                            "message": "–¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
                        }
                    else:
                        logger.error("–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ API")
                        return {
                            "success": False,
                            "error": "TOKENS_NOT_FOUND",
                            "message": "–¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ API"
                        }
                else:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {response_data}")
                    return {
                        "success": False,
                        "error": "INVALID_RESPONSE",
                        "message": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API: {response_data.get('message', 'Unknown error')}"
                    }
            else:
                logger.error(f"–û—à–∏–±–∫–∞ API login: {response.status_code} - {response.text}")
                return {
                    "success": False,
                    "error": "LOGIN_API_ERROR",
                    "message": f"–û—à–∏–±–∫–∞ API login: {response.status_code} - {response.text}"
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
            return {
                "success": False,
                "error": "NETWORK_ERROR",
                "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
            }
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
            return {
                "success": False,
                "error": "UNKNOWN_ERROR",
                "message": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            }

    def request_verification_code(self, phone_number: str, access_token: str = None, refresh_token: str = None) -> Dict:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ API (GET /auth/phoneNumberVerification)
        –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–∫–µ–Ω–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        """
        try:
            url = f"{self.api_base_url}/auth/phoneNumberVerification"
            params = {"phoneNumber": phone_number}
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            headers = {
                'User-Agent': 'PlaceAndPlay-TelegramBot/1.0',
                'language': 'en'
            }
            
            if access_token:
                headers['accessToken'] = access_token
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º accessToken –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            if refresh_token:
                headers['refreshToken'] = refresh_token
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º refreshToken –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}")
            logger.info(f"URL: {url}")
            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")

            response = requests.get(url, params=params, headers=headers, timeout=30)
            logger.info(f"–û—Ç–≤–µ—Ç API: {response.status_code} - {response.text[:400]}")

            if response.status_code == 200:
                result_json = {}
                try:
                    result_json = response.json()
                except Exception:
                    pass

                code = self._find_code_in_payload(result_json)
                if code:
                    logger.info(f"–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞ API: {code}")
                    return {
                        "success": True,
                        "message": f"–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω",
                        "phone_number": phone_number,
                        "code": code,
                        "timestamp": datetime.now().isoformat()
                    }
                else:
                    return {
                        "success": False,
                        "error": "CODE_NOT_FOUND",
                        "message": "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API",
                        "phone_number": phone_number,
                        "raw_response": result_json,
                        "timestamp": datetime.now().isoformat()
                    }
            elif response.status_code == 401:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401) –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
                return {
                    "success": False,
                    "error": "AUTH_ERROR",
                    "message": "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞.",
                    "phone_number": phone_number,
                    "timestamp": datetime.now().isoformat()
                }
            else:
                return {
                    "success": False,
                    "error": "API_ERROR",
                    "message": f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}",
                    "phone_number": phone_number,
                    "raw_response": response.text,
                    "timestamp": datetime.now().isoformat()
                }
        except requests.exceptions.RequestException as e:
            return {
                "success": False,
                "error": "NETWORK_ERROR",
                "message": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞: {str(e)}",
                "phone_number": phone_number,
                "timestamp": datetime.now().isoformat()
            }
        except Exception as e:
            return {
                "success": False,
                "error": "UNKNOWN_ERROR",
                "message": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                "phone_number": phone_number,
                "timestamp": datetime.now().isoformat()
            }

    def process_verification_automatically(self, phone_number: str, chat_id: int) -> Dict:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é:
        1. –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ API login
        2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        try:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞: {phone_number}")
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            logger.info("–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            tokens_result = self.get_auth_tokens()
            
            if not tokens_result.get("success"):
                error_message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤</b>

üö® –ü—Ä–æ–±–ª–µ–º–∞: {tokens_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>
                """.strip()
                
                self.send_telegram_message(chat_id, error_message)
                return tokens_result
            
            access_token = tokens_result["access_token"]
            refresh_token = tokens_result["refresh_token"]
            logger.info("–¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –∫–æ–¥–∞...")
            
            # –®–∞–≥ 2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
            logger.info("–®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            verification_result = self.request_verification_code(phone_number, access_token, refresh_token)
            
            if verification_result.get("success") and verification_result.get("code"):
                code = verification_result["code"]
                success_message = f"""
üîê <b>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>

üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>
üî¢ –ö–æ–¥: <code>{code}</code>

‚ö†Ô∏è <i>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥</i>
üí° <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Place&Play –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>

‚úÖ <b>–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞!</b>
                """.strip()
                
                self.send_telegram_message(chat_id, success_message)
                return {
                    "success": True,
                    "message": "–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                    "phone_number": phone_number,
                    "code": code,
                    "chat_id": chat_id
                }
            else:
                error_text = verification_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                error_type = verification_result.get("error", "UNKNOWN_ERROR")
                
                if error_type == "AUTH_ERROR":
                    error_message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>

üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>
üîë –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞

üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>
                    """.strip()
                else:
                    error_message = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞</b>

üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>
üö® –ü—Ä–æ–±–ª–µ–º–∞: {error_text}

üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>
                    """.strip()
                
                self.send_telegram_message(chat_id, error_message)
                return verification_result
                
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}"
            logger.error(error_msg)
            
            error_message = f"""
‚ùå <b>–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞</b>

üö® –ü—Ä–æ–±–ª–µ–º–∞: {error_msg}

üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>
            """.strip()
            
            self.send_telegram_message(chat_id, error_message)
            
            return {
                "success": False,
                "error": "INTERNAL_ERROR",
                "message": error_msg
            }

    def send_lottie_animation(self, chat_id: int, animation_path: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Lottie-–∞–Ω–∏–º–∞—Ü–∏—é (TGS) –≤ —á–∞—Ç"""
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendAnimation"
            with open(animation_path, "rb") as anim_file:
                files = {"animation": anim_file}
                data = {"chat_id": chat_id}
                response = requests.post(url, data=data, files=files, timeout=10)
            if response.status_code == 200:
                logger.info(f"Lottie-–∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Lottie-–∞–Ω–∏–º–∞—Ü–∏–∏: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Lottie-–∞–Ω–∏–º–∞—Ü–∏–∏: {str(e)}")
            return False

    def send_telegram_message(self, chat_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞. –ï—Å–ª–∏ message –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å __LOTTIE__, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é."""
        try:
            if message.startswith("__LOTTIE__"):
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å Lottie-–∞–Ω–∏–º–∞—Ü–∏—é
                lottie_path = os.path.join(os.path.dirname(__file__), "Animation-incom-message.tgs")
                self.send_lottie_animation(chat_id, lottie_path)
                # –£–±—Ä–∞—Ç—å –º–∞—Ä–∫–µ—Ä –∏ –ø—Ä–æ–±–µ–ª—ã
                message = message.replace("__LOTTIE__", "", 1).lstrip()
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/sendMessage"
            data = {"chat_id": chat_id, "text": message, "parse_mode": "HTML"}
            response = requests.post(url, json=data, timeout=10)
            if response.status_code == 200:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code} - {response.text}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            return False

    def get_user_info(self, chat_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ chat_id"""
        try:
            url = f"https://api.telegram.org/bot{self.telegram_bot_token}/getChat"
            data = {"chat_id": chat_id}
            response = requests.post(url, json=data, timeout=10)
            
            if response.status_code == 200:
                chat_info = response.json()["result"]
                return {
                    "success": True,
                    "chat_id": chat_id,
                    "chat_type": chat_info.get("type"),
                    "title": chat_info.get("title"),
                    "username": chat_info.get("username"),
                    "first_name": chat_info.get("first_name"),
                    "last_name": chat_info.get("last_name")
                }
            else:
                return {
                    "success": False,
                    "error": f"–û—à–∏–±–∫–∞ API: {response.status_code}",
                    "message": response.text
                }
        except Exception as e:
            return {
                "success": False,
                "error": "EXCEPTION",
                "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}"
            }

    def send_chat_id_info(self, chat_id: int) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ chat_id"""
        user_info = self.get_user_info(chat_id)
        
        if user_info["success"]:
            message = (
                "üÜî <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ</b>\n\n"
                f"üì± <b>Chat ID:</b> <code>{chat_id}</code>\n"
                f"üë§ <b>–¢–∏–ø:</b> {user_info['chat_type']}\n"
            )
            
            if user_info.get("title"):
                message += f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {user_info['title']}\n"
            if user_info.get("username"):
                message += f"üîó <b>Username:</b> @{user_info['username']}\n"
            if user_info.get("first_name"):
                message += f"üë® <b>–ò–º—è:</b> {user_info['first_name']}\n"
            if user_info.get("last_name"):
                message += f"üë® <b>–§–∞–º–∏–ª–∏—è:</b> {user_info['last_name']}\n"
            
            message += "\nüí° <i>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç Chat ID –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ API</i>"
        else:
            message = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</b>\n\n"
                f"üö® –ü—Ä–æ–±–ª–µ–º–∞: {user_info['message']}\n\n"
                "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</b>"
            )
        
        return self.send_telegram_message(chat_id, message)

    def process_verification_request(self, chat_id: int, phone_number: str, access_token: str = None, refresh_token: str = None) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å: –¥–µ—Ä–≥–∞–µ—Ç API —Å —Ç–æ–∫–µ–Ω–∞–º–∏, –∏–∑–≤–ª–µ–∫–∞–µ—Ç code, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}, –Ω–æ–º–µ—Ä: {phone_number}")
        logger.info(f"–¢–æ–∫–µ–Ω—ã: accessToken={'–ø–µ—Ä–µ–¥–∞–Ω' if access_token else '–Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}, refreshToken={'–ø–µ—Ä–µ–¥–∞–Ω' if refresh_token else '–Ω–µ –ø–µ—Ä–µ–¥–∞–Ω'}")
        
        api_result = self.request_verification_code(phone_number, access_token, refresh_token)

        if api_result.get("success") and api_result.get("code"):
            code = api_result["code"]
            message = (
                "üîê <b>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
                f"üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>\n"
                f"üî¢ –ö–æ–¥: <code>{code}</code>\n\n"
                "‚ö†Ô∏è <i>–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥</i>\n"
                "üí° <i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>"
            )
            self.send_telegram_message(chat_id, message)
            return {"success": True, "message": "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", "code": code}
        else:
            error_text = api_result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            error_type = api_result.get("error", "UNKNOWN_ERROR")
            
            if error_type == "AUTH_ERROR":
                message = (
                    "‚ùå <b>–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
                    f"üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>\n"
                    "üîë –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞\n\n"
                    "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ</b>"
                )
            else:
                message = (
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞</b>\n\n"
                    f"üì± –ù–æ–º–µ—Ä: <code>{phone_number}</code>\n"
                    f"üö® –ü—Ä–æ–±–ª–µ–º–∞: {error_text}\n\n"
                    "üîÑ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</b>"
                )
            
            self.send_telegram_message(chat_id, message)
            return {"success": False, "error": error_type, "message": error_text}

    def get_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞"""
        return {
            "agent_status": "active",
            "api_base_url": self.api_base_url,
            "telegram_bot_configured": bool(self.telegram_bot_token),
            "api_credentials_configured": bool(self.login_email and self.login_password),
            "timestamp": datetime.now().isoformat()
        }

if __name__ == "__main__":
    try:
        agent = PlaceAndPlayAgent()
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Place&Play Agent...")
        
        # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤
        result = agent.request_verification_code("+998998888931")
        print(f"üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ (–±–µ–∑ —Ç–æ–∫–µ–Ω–æ–≤): {result}")
        
        # –¢–µ—Å—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ)
        result_with_tokens = agent.request_verification_code(
            "+998998888931", 
            access_token="test_access_token", 
            refresh_token="test_refresh_token"
        )
        print(f"üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ (—Å —Ç–æ–∫–µ–Ω–∞–º–∏): {result_with_tokens}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = agent.get_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–∞: {stats}")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
